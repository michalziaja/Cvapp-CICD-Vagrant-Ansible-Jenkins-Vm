pipeline {
    agent any
    

    environment {
        FRONTEND = "192.168.22.23"
        USER = "ubuntu"
    }

	stages {
		stage('Code Checkout') {
			steps {
				checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/michalziaja/jenkins-docker.git']])
			}
		}

		stage('Npm Install') {
			steps {
				dir('frontend') {
					npm 'install'
				
                }
			}
		}

		stage('ViTest') {
		    steps {
		        dir('frontend') {
		            npm 'run test'
		        }
		    }
		}
		
		stage('Build Docker Image') {
            steps {
            	dir('frontend') {
                	script {
                    	react = docker.build("michalziaja/app-react:${env.BUILD_ID}")
                    }
                }
            }
		}
		
		stage('Push Image to DockerHub') {
		    steps {
		    	dir('frontend') {
		        	script {
		            	withDockerRegistry(credentialsId: 'docker-login', url: 'https://index.docker.io/v1/') {
		                	react.push()
		                }
		            }	
		        }
		    }
		}
        stage('Stop & Remove Working Container') {
            steps {
                script {
                    sshagent(credentials: ['ubuntu']) {
                        sh "ssh ${USER}@${FRONTEND} 'docker stop \$(docker ps -q)'"
                    }
                }
            }
        }
		stage('Pull & Run Docker on Frontend Vm') {
            steps {
                script {
                    sshagent(credentials: ['ubuntu']) {
                        sh "ssh ${USER}@${FRONTEND} 'docker pull michalziaja/app-react:${env.BUILD_ID}'"
                        sh "ssh ${USER}@${FRONTEND} 'docker run -d -p 80:80 --rm --name react michalziaja/app-react:${env.BUILD_ID}'"
                    }
                }
            }
        }
        
        stage('Test Connection to Frontend Container') {
            steps {
                script {
                    sh 'sleep 60'
                    sh 'curl -f http://192.168.22.23'
                }
            }
        }
	}
}
